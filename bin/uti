#!/usr/bin/env python3

import re
import sys
import objc
import argparse
from pathlib import Path
from UniformTypeIdentifiers import UTType
from Foundation import NSURL, NSURLTypeIdentifierKey



def get_file_uti(path: str) -> str:
    '''
    Get the UTI of the item at the provided path
    '''
    url = NSURL.fileURLWithPath_(path)
    success, value, error = url.getResourceValue_forKey_error_(None, NSURLTypeIdentifierKey, None)
    
    if success and value:
        return value
    else:
        error_message = error.localizedDescription() if error else "Unknown error"
        raise ValueError(f"Unable to determine UTI: {error_message}")


def check_conformity(target_uti, checked_uti) -> bool:
    '''
    Determine whether one UTI conforms to another
    '''
    target_uti_str = target_uti
    checked_uti_str = checked_uti
    target_uti = UTType.typeWithIdentifier_(target_uti)
    checked_uti = UTType.typeWithIdentifier_(checked_uti)
    try:
        result = target_uti.conformsToType_(checked_uti)
        return result
    except (AttributeError, objc.error) as e:
        if isinstance(e, AttributeError):
            print(f"uti: Error: Unable to instantiate type from UTI string '{target_uti_str}'")
        else:
            print(f"uti: Error: Unable to instantiate type from UTI string '{checked_uti_str}'")
        exit(1)


def decode_dynamic_uti(uti: str) -> str:
    '''
    Decode a dynamic uti 
    '''
    
    # Define the vector of valid characters used in the encoded UTI
    vector = "abcdefghkmnpqrstuvwxyz0123456789"

    # Validate that the UTI begins with "dyn.a"
    if not uti.startswith("dyn.a"):
        print("uti: Error: Input not recognized as dynamic UTI")
        exit(1)

    encoded = uti[5:] # Skip the first 5 characters ("dyn.a") and get the rest of the string
    result = []
    decoded = 0
    decoded_bits = 0

    # Base32 decode each character in the encoded part of the UTI
    for char in encoded:
        try:
            position = vector.index(char)
        except ValueError:
            print(f"Error, character '{char}' invalid for custom encoding scheme {[i for i in vector]}")
            return None
        
        # Shift the accumulated decoded value left by 5 bits to make room for the new 5 bits
        decoded = (decoded << 5) | position
        
        # Increment the count of decoded bits by 5
        decoded_bits += 5

        # If we have at least 8 bits, we can extract a UTF-8 code unit
        if decoded_bits >= 8:
            # Calculate the number of extra bits beyond 8
            extra = decoded_bits - 8

            # Extract the top 8 bits and append as a character to the result list
            result.append(chr(decoded >> extra))

            # Mask out the top 8 bits, leaving only the extra bits
            decoded &= (1 << extra) - 1

            # Update the count of decoded bits to the number of extra bits
            decoded_bits = extra

    if decoded != 0:
        # If there are leftover bits, the input UTI was not properly encoded
        print(f"{decoded_bits} leftover bits: {decoded}")
        return None

    decoded_uti =  ''.join(result)
    return decoded_uti


def uti_string_replace(decoded_uti: str) -> str:
    '''
    Maps the placeholders in the decoded UTI to their corresponding values
    '''
    
    properties = {
        '0': 'UTTypeConformsTo',
        '1': 'public.filename-extension',
        '2': 'com.apple.ostype',
        '3': 'public.mime-type',
        '4': 'com.apple.nspboard-type',
        '5': 'public.url-scheme',
        '6': 'public.data',
        '7': 'public.text',
        '8': 'public.plain-text',
        '9': 'public.utf16-plain-text',
        'A': 'com.apple.traditional-mac-plain-text',
        'B': 'public.image',
        'C': 'public.video',
        'D': 'public.audio',
        'E': 'public.directory',
        'F': 'public.folder'
    }

    # Pattern matching key=value pairs
    pattern = re.compile(r'([?:])([0-9A-F])=([^:]+)')

    def expand_values(key_desc, value):
        # public.filename-extension values are always literal
        if key_desc == 'public.filename-extension':
            return value

        # Split comma-separated values and expand individually if present in properties
        parts = value.split(',')
        expanded_parts = [properties.get(p, p) for p in parts]
        return ','.join(expanded_parts)

    def replace_match(match):
        delimiter, key, value = match.groups()
        expanded_key = properties.get(key, key)
        expanded_value = expand_values(expanded_key, value)

        return f"{delimiter}{expanded_key}={expanded_value}"

    replaced_uti = pattern.sub(replace_match, decoded_uti)
    return replaced_uti


def main():
    parser = argparse.ArgumentParser(
        description="Uniform Type Identifier (UTI) Utility",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog=(
            "\033[37mExamples:\033[0m\n"
            "  uti get MyFile.dat\n"
            "  uti get --show-dynamic MyFile.dat\n"
            "  uti resolve dyn.ah62d4r3qkk7dgtpyqz6hkp42fzxhe55cfvy042phqy1zuppgsm10esvvhzxhe55c\n"
            "  uti conforms public.png public.image\n"
            "  uti conforms MyFile.dat public.data --verbose\n"
            "\n"
            "\033[37mMore Information:\033[0m\n"
            "  See the manual page with 'man uti'"
        )
    )
    subparsers = parser.add_subparsers(dest='command', required=True, help='\033[37mSubcommands\033[0m')

    # get
    get_parser = subparsers.add_parser('get', help='Get the UTI of a file')
    get_parser.add_argument('filepath', help='Path to file')
    get_parser.add_argument('-s', '--show-dynamic', action='store_true', help='Show dynamic UTIs without resolving them')

    # resolve
    resolve_parser = subparsers.add_parser('resolve', help='Resolve a dynamic UTI')
    resolve_parser.add_argument('dynamic_uti', help='Dynamic UTI to resolve')

    # conforms
    conforms_parser = subparsers.add_parser('conforms', help='Check UTI conformity')
    conforms_parser.add_argument('uti_or_path', help='UTI or file path to check')
    conforms_parser.add_argument('target_uti', help='Target UTI to check against')
    conforms_parser.add_argument('-v', '--verbose', action='store_true', help='Show verbose output')

    args = parser.parse_args()

    if args.command == 'resolve':
        if not args.dynamic_uti.startswith("dyn.a"):
            parser.error("Input not recognized as dynamic UTI")
        decoded_uti = decode_dynamic_uti(args.dynamic_uti)
        fully_decoded_uti = uti_string_replace(decoded_uti)
        print(fully_decoded_uti)

    elif args.command == 'conforms':
        path_or_uti = args.uti_or_path
        if Path(path_or_uti).exists():
            uti = get_file_uti(str(Path(path_or_uti).resolve()))
        else:
            uti = path_or_uti

        conforms = check_conformity(uti, args.target_uti)
        if args.verbose:
            if conforms:
                print(f"'{uti}' \033[32mconforms\033[0m to '{args.target_uti}'")
            else:
                print(f"'{uti}' \033[31mdoes not conform\033[0m to '{args.target_uti}'")
        
        sys.exit(0 if conforms else 1)

    elif args.command == 'get':
        path = Path(args.filepath)
        uti = get_file_uti(str(path.resolve()))

        if uti.startswith('dyn.a') and not args.show_dynamic:
            decoded_uti = decode_dynamic_uti(uti)
            fully_decoded_uti = uti_string_replace(decoded_uti)
            print(fully_decoded_uti)
        else:
            print(uti)


if __name__ == "__main__":
    main()