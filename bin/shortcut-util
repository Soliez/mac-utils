#!/usr/bin/env python3

import re
import sys
import json
import base64
import difflib
import argparse
import plistlib
import subprocess
from io import BytesIO
from pathlib import Path
from zipfile import ZipFile
from datetime import datetime
from urllib.parse import urlparse



def get_shortcut_names() -> list:
    '''
    Get the names of all shortcuts installed on the device as a list
    '''
    try:
        process = subprocess.run(['shortcuts', 'list'], capture_output=True, text=True, check=True)
        return process.stdout.splitlines()
    except subprocess.CalledProcessError as e:
        print(f"Failed to get shortcut names: {e}")
        sys.exit(1)


def get_shortcut_plist(name: str, output_dict: bool = True) -> dict|str:
    '''
    Convert the shortcut to a XML property-list and output as a dictionary or as a plist string
    
    This function uses a external utility shortcut to convert the shortcut to a plist
    Please ensure you have added this shortcut to your library

    Shortcut to Plist Non-Interactive
    https://www.icloud.com/shortcuts/b6eaf496eeae4eeeb76b4e355e83a641
    '''

    utility_shortcut = "Shortcut to Plist Non-Interactive"
    command = ['shortcuts', 'run', utility_shortcut, '-i', name, '-o', '-']
    try:
        process = subprocess.run(command, capture_output=True, check=True)
        decoded_output = base64.b64decode(process.stdout)
        if output_dict:
            return plistlib.loads(decoded_output)
        else:
            return decoded_output.decode('utf-8')
    except subprocess.CalledProcessError as e:
        print(f"Failed to run utility shortcut: {e}")
        sys.exit(1)
    except plistlib.InvalidFileException:
        print("Failed to decode plist.")
        sys.exit(1)


def get_shortcut_actions(shortcut_dict: dict) -> list[dict]:
    '''
    Extract the actions data from the shortcut dictionary
    '''
    return shortcut_dict.get('WFWorkflowActions', [])


def shortcut_exists(name: str) -> bool:
    '''
    Check whether a shortcut currently exists in your library
    '''
    return name in get_shortcut_names()


def get_action_ids(shortcut_actions: dict) -> list[str]:
    '''
    Get a list of shortcut action identifiers present in the shortcut
    '''
    return [action['WFWorkflowActionIdentifier'] for action in shortcut_actions]


def get_shortcut_uuid(shortcut_name: str) -> str | None:
    '''
    Retrieve the UUID of a shortcut by its exact name.
    '''
    try:
        result = subprocess.run(
            ['shortcuts', 'list', '--show-identifiers'],
            capture_output=True,
            text=True,
            check=True
        )
    except subprocess.CalledProcessError as e:
        print(f"Error: {e}")
        return None
    
    pattern = re.compile(rf'^{re.escape(shortcut_name)}\s+\(([A-Za-z0-9\-]+)\)$')

    for line in result.stdout.splitlines():
        match = pattern.match(line)
        if match:
            return match.group(1)
    return None


def open_shortcut(shortcut_name: str) -> None:
    '''
    Open a shortcut in the Shortcuts editor
    '''

    if not shortcut_exists(shortcut_name):
        print(f"Error: '{shortcut_name}' does not appear to match the name of a shortcut in your library")
        sys.exit(1)

    try:
        subprocess.run(
            ['shortcuts', 'view', shortcut_name],
            check=True
        )
    except subprocess.CalledProcessError:
        print(f"Error: Unable to open shortcut '{shortcut_name}'")
        sys.exit(1)


def import_shortcut(path_or_url: str, isURL: bool = False) -> None:
    '''
    Import a shortcut to your Shortcuts Library via opening a shortcut file or iCloud Share URL
    '''

    if isURL:
        components = urlparse(path_or_url)
        if components.netloc == 'www.icloud.com' and components.path.startswith('/shortcuts/'):
            identifier = components.path.removeprefix('/shortcuts/')
            import_url = f"shortcuts://shortcuts/{identifier}"
            try:
                subprocess.run(
                    ['open', import_url],
                    check=True
                )
            except subprocess.CalledProcessError:
                print(f"Error: Unable to import shortcut from URL '{path_or_url}'")
                sys.exit(1)
        else:
            print(f"Error: Invalid iCloud URL '{path_or_url}'")
            print('\tThe URL should conform to the following structure: https://www.icloud.com/shortcuts/<SHORTCUT_ID>')
            sys.exit(1)

    else:
        file = Path(path_or_url).resolve()
        if not file.exists():
            print(f"Error: '{str(file)}' does not appear to exist")
            sys.exit(1)

        if not file.is_file():
            print(f"Error: path '{str(file)}' exists but does not appear to be a file")
            sys.exit(1)
        
        try:
            subprocess.run(
                ['open', '-a', 'Shortcuts', str(file)],
                check=True
            )
        except subprocess.CalledProcessError:
            print(f"Error: Unable to import shortcut file '{file.name}'")
            sys.exit(1)


def create_shortcut() -> None:
    '''
    Create a new shortcut in the Shortcuts Editor
    '''

    try:
        url = 'shortcuts://create-shortcut'
        subprocess.run(
            ['open', url],
            check=True
        )
    except subprocess.CalledProcessError as e:
        print(f'Error: Unable to create new shortcut\n{e}')
        sys.exit(1)


def get_icloud_url(shortcut_name: str) -> str:
    '''
    Create an iCloud Share URL for a shortcut in your library

    This function uses an external utility shortcut to create the iCloud URL for the given shortcut.
    Please ensure you have added this shortcut to your library.

    Get iCloud URL Non-Interactive
    https://www.icloud.com/shortcuts/2004684ce9b44a00854db22f87b1883e
    '''
    
    if not shortcut_exists(shortcut_name):
        print(f"Error: No shortcut named '{shortcut_name}' was found in your Shortcuts Library")
        sys.exit(1)

    utility_shortcut = "Get iCloud URL Non-Interactive"

    try:
        process = subprocess.run(
            ['shortcuts', 'run', utility_shortcut, '-i', shortcut_name, '-o', '-'],
            capture_output=True,
            check=True
        )
        url = base64.b64decode(process.stdout)
        return url.decode('utf-8').removesuffix('\n')
    except subprocess.CalledProcessError:
        print(f"Error: Unable to get iCloud Share URL for shortcut '{shortcut_name}'")
        sys.exit(1)


def export_shortcuts(
        save_dir: str,
        names: list[str],
        all: bool = False,
        compressed: bool = False,
        organize: bool = False,
        compression_algo: str = ''
        ) -> None:
    '''
    Export shortcuts from your library, optionally compressing and/or organizing them

    Supported compression formats:
        - zip
        - tar.gz
        - tar.bz2
        - tar.xz
        - tar
        - gz
        - cpio
        - iso

    This function uses an external utility shortcut to export the shortcuts from your library.
    Please ensure you have added this shortcut to your library.

    Export Shortcuts Non-Interactive
    https://www.icloud.com/shortcuts/1e572591a5dd4d23850a0a6c2b289aa9
    '''

    utility_shortcut = 'Export Shortcuts Non-Interactive'

    # Compression algorithims supported by the Shorcuts app
    supported_algos = ['zip', 'tar.gz', 'tar.bz2', 'tar.xz', 'tar', 'gz', 'cpio', 'iso']

    names = [name for name in names if shortcut_exists(name)]

    if not all:
        if len(names) < 1:
            print(f"Error: No shortcuts matching the names provided were found")
            sys.exit(1)
    
    if compressed:
        if compression_algo not in supported_algos:
            print(f"Error: '{compression_algo}' is not a supported compression algorithim ")
            print(f"Supported Algorithims: {supported_algos}")
            sys.exit(1)

    # Create the base save directory if it doesn't already exist
    Path(save_dir).resolve().mkdir(exist_ok=True)

    # Create a subdirectory for each shortcut to be exported if it doesn't already exist in save_dir
    if organize:
        for name in names:
            Path(f"{save_dir}/{name}").resolve().mkdir(exist_ok=True)

    options = {
        "names": names,
        "all": all,
        "compressed": compressed,
        "compression_algo": f".{compression_algo}"
    }

    try:
        options_json = json.dumps(options)
        process = subprocess.run(
            ['shortcuts', 'run', utility_shortcut, '-i', '-'],
            input=options_json.encode('utf-8'),
            capture_output=True,
            check=True
        )
        encoded_data = process.stdout
    except subprocess.CalledProcessError as e:
        print(f"Error: Unable to export shortcuts\n{e}")
        sys.exit(1)
    
    zip_data = base64.b64decode(encoded_data)
    zip_buffer = BytesIO(zip_data)

    creation_date = datetime.now().strftime("%Y-%m-%d")
    if compressed:
        if organize:
            output_path = f"{save_dir}/Shortcut Exports/shortcuts export {creation_date}.{compression_algo}"
        else:
            output_path = f"{save_dir}/shortcuts export {creation_date}.{compression_algo}"
        outpath = Path(output_path).write_bytes(zip_buffer.getvalue())
    else:
        with ZipFile(zip_buffer) as zip_file:
            if organize:
                for item in zip_file.namelist():
                    item_name = Path(item).stem
                    output_path = Path(f"{save_dir}/{item_name}")
                    output_path.mkdir(parents=True, exist_ok=True)
                    zip_file.extract(item, path=str(output_path))
            else:
                zip_file.extractall(path=save_dir)


def compare_shortcuts(name1: str, name2: str) -> None:
    '''
    Generate a unified diff of two shortcuts
    '''

    names = [name1, name2]
    for name in names:
        if not shortcut_exists(name):
            print(f"Error: '{name}' does not appear to match the name of a shortcut in your library")
            sys.exit(1)

    shortcut1 = get_shortcut_plist(name1, output_dict=False).splitlines(keepends=True)
    shortcut2 = get_shortcut_plist(name2, output_dict=False).splitlines(keepends=True)
    
    diff = difflib.unified_diff(
        shortcut1,shortcut2,
        fromfile=f'{name1}.shortcut',
        tofile=f'{name2}.shortcut',
        lineterm=''
    )

    unified_diff = ''.join(diff)

    if diff:
        print(unified_diff)
    else:
        print("✅ No differences detected")


def main():
    parser = argparse.ArgumentParser(
        description="Siri Shortcuts Utility",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog=(
            "\033[37mExamples:\033[0m\n"
            "  shortcut-util get-actions <shortcut-name>\n"
            "  shortcut-util count-actions <shortcut-name>\n"
            "  shortcut-util convert <shortcut-name> --json\n"
            "  shortcut-util convert <shortcut-name> --plist\n"
            "  shortcut-util get-uuid <shortcut-name>\n"
            "  shortcut-util open <shortcut-name>\n"
            "  shortcut-util import <path-to-shortcut-file>\n"
            "  shortcut-util import <shortcut-share-url> --url\n"
            "  shortcut-util create\n"
            "  shortcut-util icloud-url <shortcut-name>\n"
            "  shortcut-util export -n <shortcut-name> -s <save-destination>\n"
            "  shortcut-util export --names <shortcut1> <shortcut2> --save-dir <save-destination> --organize\n"
            "  shortcut-util export --all -s <save-destination> --compressed -algo tar.gz\n"
            "  shortcut-util diff <shortcut1> <shortcut2>\n"
        )
    )
    subparsers = parser.add_subparsers(dest='command', required=True, help='\033[37mSubcommands\033[0m')

    # get-actions parser
    get_actions_parser = subparsers.add_parser('get-actions', help='Extract the actions from a Shortcut')
    get_actions_parser.add_argument('name', help='The name of the Shortcut to parse')
    get_actions_parser.add_argument('-j', '--json', action='store_true', help='Output actions in JSON format')
    get_actions_parser.add_argument('-i', '--identifiers', action='store_true', help='Output a list of shortcut action identifiers present in the shortcut')

    # count-actions parser
    count_actions_parser = subparsers.add_parser('count-actions', help='Count the actions in a Shortcut')
    count_actions_parser.add_argument('name', help='The name of the Shortcut')

    # convert parser
    convert_parser = subparsers.add_parser('convert', help="Convert a Shortcut to JSON or PLIST")
    convert_parser.add_argument('name', help="The name of the Shortcut to convert")
    convert_parser.add_argument('-j','--json', action='store_true', help="Convert the Shortcut to JSON")
    convert_parser.add_argument('-p','--plist', action='store_true', help="Convert the Shortcut to PLIST")

    # get-uuid parser
    get_uuid_parser = subparsers.add_parser('get-uuid', help="Get the UUID of a Shortcut")
    get_uuid_parser.add_argument('name', help="The name of the Shortcut to retrieve the UUID of")

    # open parser
    open_parser = subparsers.add_parser('open', help='Open a shortcut in the Shortcuts Editor')
    open_parser.add_argument('name', help='The name of the Shortcut to open')

    # import parser
    import_parser = subparsers.add_parser('import', help="Import a shortcut file into your Shortcuts Library")
    import_parser.add_argument('path_or_url', help='The path to the shortcut file or the iCloud Share URL of the shortcut to import')
    import_parser.add_argument('--url', action='store_true', help='Import the shortcut from an iCloud Share URL')

    # create parser
    create_parser = subparsers.add_parser('create', help='Create a new shortcut in the Shortcuts Editor')

    # icloud-url parser
    icloud_url_parser = subparsers.add_parser('icloud-url', help='Create an iCloud Share URL for a shortcut in your library')
    icloud_url_parser.add_argument('name', help='The name of the shortcut to create the iCloud Share URL for')

    # export parser
    export_parser = subparsers.add_parser('export', help="Export shortcuts from your library, optionally compressing and/or organizing them into folders")
    export_parser.add_argument('-n', '--names', nargs='+', type=str, default=[], help='The name(s) of the shortcuts to export')
    export_parser.add_argument('-a', '--all', action='store_true', help="Export all shortcuts in your library")
    export_parser.add_argument('-c','--compressed', action='store_true', help="Whether or not to compress the exported shortcuts")
    export_parser.add_argument('-algo', '--compression-algorithim', type=str, default='zip', help="The compression algorithim to use: (zip, tar.gz, tar.bz2, tar.xz, tar, gz, cpio, iso)")
    export_parser.add_argument('-o', '--organize', action='store_true', help="Whether or not to organize the exported shortcuts into folders")
    export_parser.add_argument('-s', '--save-dir', type=str, default='.', help="The directory to save the exported shortcuts to")

    # diff parser
    diff_parser = subparsers.add_parser('diff', help="Generate a unified diff of two shortcuts for comparison")
    diff_parser.add_argument('name1', type=str, help='The first shortcut to compare')
    diff_parser.add_argument('name2', type=str, help='The second shortcut to compare')


    args = parser.parse_args()


    # get-actions main
    if args.command == 'get-actions':
        if not shortcut_exists(args.name):
            print(f"Error: '{args.name}' does not exist in your Shortcuts library")
            sys.exit(1)

        plist = get_shortcut_plist(args.name)
        actions = get_shortcut_actions(plist)
        if args.identifiers:
            output = get_action_ids(actions)
        else:
            output = actions
            
        if args.json:
            print(json.dumps(output, indent=4))
        else:
            print(plistlib.dumps(output, fmt=plistlib.FMT_XML).decode('utf-8'))

    # count-actions main
    elif args.command == 'count-actions':
        if not shortcut_exists(args.name):
            print(f"Error: '{args.name}' does not exist in your Shortcuts library")
            sys.exit(1)

        plist = get_shortcut_plist(args.name)
        actions = get_shortcut_actions(plist)
        print(len(actions))

    # convert main
    elif args.command == 'convert':
        if not shortcut_exists(args.name):
            print(f"Error: '{args.name}' does not exist in your Shortcuts library")
            sys.exit(1)

        plist = get_shortcut_plist(args.name)
        if args.json:
            print(json.dumps(obj=plist, indent=4))
        elif args.plist:
            print(plistlib.dumps(plist, fmt=plistlib.FMT_XML).decode('utf-8'))

    # get-uuid main
    elif args.command == 'get-uuid':
        if not shortcut_exists(args.name):
            print(f"Error: '{args.name}' does not exist in your Shortcuts library")
            sys.exit(1)

        uuid = get_shortcut_uuid(args.name)
        if not uuid:
            print(f"Error: UUID for '{args.name}' not found")
            sys.exit(1)
        print(uuid)
    
    # open main
    elif args.command == 'open':
        open_shortcut(args.name)

    # import main
    elif args.command == 'import':
        if args.url:
            import_shortcut(args.path_or_url, isURL=True)
        else:
            import_shortcut(args.path_or_url)
    
    # create main
    elif args.command == 'create':
        create_shortcut()

    # icloud-url main
    elif args.command == 'icloud-url':
        url = get_icloud_url(args.name)
        print(url)
    
    # export main
    elif args.command == 'export':
        export_shortcuts(
            save_dir=args.save_dir,
            names=args.names,
            all=args.all,
            compressed=args.compressed,
            organize=args.organize,
            compression_algo=args.compression_algorithim
        )

    # diff main
    elif args.command == 'diff':
        compare_shortcuts(args.name1, args.name2)



if __name__ == "__main__":
    main()