#!/usr/bin/env python3

import re
import sys
import json
import base64
import argparse
import plistlib
import subprocess
from pathlib import Path
from urllib.parse import urlparse



def get_shortcut_names() -> list:
    '''
    Get the names of all shortcuts installed on the device as a list
    '''
    try:
        process = subprocess.run(['shortcuts', 'list'], capture_output=True, text=True, check=True)
        return process.stdout.splitlines()
    except subprocess.CalledProcessError as e:
        print(f"Failed to get shortcut names: {e}")
        sys.exit(1)


def get_shortcut_plist(name: str) -> dict:
    '''
    Convert the shortcut to a XML property-list and output as a dictionary
    
    This function uses a external utility shortcut to convert the shortcut to a plist
    Please ensure you have added this shortcut to your library

    Shortcut to Plist Non-Interactive
    https://www.icloud.com/shortcuts/88858e2a2e3841d781a6eda4293bf575
    '''

    utility_shortcut = "Shortcut to Plist Non-Interactive"
    command = ['shortcuts', 'run', utility_shortcut, '-i', name, '-o', '-']
    try:
        process = subprocess.run(command, capture_output=True, check=True)
        decoded_output = base64.b64decode(process.stdout)
        return plistlib.loads(decoded_output)
    except subprocess.CalledProcessError as e:
        print(f"Failed to run utility shortcut: {e}")
        sys.exit(1)
    except plistlib.InvalidFileException:
        print("Failed to decode plist.")
        sys.exit(1)


def get_shortcut_actions(shortcut_dict: dict) -> list[dict]:
    '''
    Extract the actions data from the shortcut dictionary
    '''
    return shortcut_dict.get('WFWorkflowActions', [])


def shortcut_exists(name: str) -> bool:
    '''
    Check whether a shortcut currently exists in your library
    '''
    return name in get_shortcut_names()


def get_action_ids(shortcut_actions: dict) -> list[str]:
    '''
    Get a list of shortcut action identifiers present in the shortcut
    '''
    return [action['WFWorkflowActionIdentifier'] for action in shortcut_actions]


def get_shortcut_uuid(shortcut_name: str) -> str | None:
    '''
    Retrieve the UUID of a shortcut by its exact name.
    '''
    try:
        result = subprocess.run(
            ['shortcuts', 'list', '--show-identifiers'],
            capture_output=True,
            text=True,
            check=True
        )
    except subprocess.CalledProcessError as e:
        print(f"Error: {e}")
        return None
    
    pattern = re.compile(rf'^{re.escape(shortcut_name)}\s+\(([A-Za-z0-9\-]+)\)$')

    for line in result.stdout.splitlines():
        match = pattern.match(line)
        if match:
            return match.group(1)
    return None


def open_shortcut(shortcut_name: str) -> None:
    '''
    Open a shortcut in the Shortcuts editor
    '''

    if not shortcut_exists(shortcut_name):
        print(f"Error: '{shortcut_name}' does not appear to match the name of a shortcut in your library")
        sys.exit(1)

    try:
        subprocess.run(
            ['shortcuts', 'view', shortcut_name],
            check=True
        )
    except subprocess.CalledProcessError:
        print(f"Error: Unable to open shortcut '{shortcut_name}'")
        sys.exit(1)


def import_shortcut(path_or_url: str, isURL: bool = False) -> None:
    '''
    Import a shortcut to your Shortcuts Library via opening a shortcut file or iCloud Share URL
    '''

    if isURL:
        components = urlparse(path_or_url)
        if components.netloc == 'www.icloud.com' and components.path.startswith('/shortcuts/'):
            identifier = components.path.removeprefix('/shortcuts/')
            import_url = f"shortcuts://shortcuts/{identifier}"
            try:
                subprocess.run(
                    ['open', import_url],
                    check=True
                )
            except subprocess.CalledProcessError:
                print(f"Error: Unable to import shortcut from URL '{path_or_url}'")
                sys.exit(1)
        else:
            print(f"Error: Invalid iCloud URL '{path_or_url}'")
            print('\tThe URL should conform to the following structure: https://www.icloud.com/shortcuts/<SHORTCUT_ID>')
            sys.exit(1)

    else:
        file = Path(path_or_url).resolve()
        if not file.exists():
            print(f"Error: '{str(file)}' does not appear to exist")
            sys.exit(1)

        if not file.is_file():
            print(f"Error: path '{str(file)}' exists but does not appear to be a file")
            sys.exit(1)
        
        try:
            subprocess.run(
                ['open', '-a', 'Shortcuts', str(file)],
                check=True
            )
        except subprocess.CalledProcessError:
            print(f"Error: Unable to import shortcut file '{file.name}'")
            sys.exit(1)


def main():
    parser = argparse.ArgumentParser(
        description="Siri Shortcuts Utility",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog=(
            "\033[37mExamples:\033[0m\n"
            "  shortcut-util get-actions shortcut-name\n"
            "  shortcut-util count-actions shortcut-name\n"
            "  shortcut-util convert shortcut-name --json\n"
            "  shortcut-util convert shortcut-name --plist\n"
            "  shortcut-util get-uuid shortcut-name\n"
            "  shortcut-util open shortcut-name\n"
            "  shortcut-util import path-to-shortcut-file\n"
            "  shortcut-util import icloud-url --url\n"
        )
    )
    subparsers = parser.add_subparsers(dest='command', required=True, help='\033[37mSubcommands\033[0m')

    # get-actions parser
    get_actions_parser = subparsers.add_parser('get-actions', help='Extract the actions from a Shortcut')
    get_actions_parser.add_argument('name', help='The name of the Shortcut to parse')
    get_actions_parser.add_argument('-j', '--json', action='store_true', help='Output actions in JSON format')
    get_actions_parser.add_argument('-i', '--identifiers', action='store_true', help='Output a list of shortcut action identifiers present in the shortcut')

    # count-actions parser
    count_actions_parser = subparsers.add_parser('count-actions', help='Count the actions in a Shortcut')
    count_actions_parser.add_argument('name', help='The name of the Shortcut')

    # convert parser
    convert_parser = subparsers.add_parser('convert', help="Convert a Shortcut to JSON or PLIST")
    convert_parser.add_argument('name', help="The name of the Shortcut to convert")
    convert_parser.add_argument('-j','--json', action='store_true', help="Convert the Shortcut to JSON")
    convert_parser.add_argument('-p','--plist', action='store_true', help="Convert the Shortcut to PLIST")

    # get-uuid parser
    get_uuid_parser = subparsers.add_parser('get-uuid', help="Get the UUID of a Shortcut")
    get_uuid_parser.add_argument('name', help="The name of the Shortcut to retrieve the UUID of")

    # open parser
    open_parser = subparsers.add_parser('open', help='Open a shortcut in the Shortcuts Editor')
    open_parser.add_argument('name', help='The name of the Shortcut to open')

    # import parser
    import_parser = subparsers.add_parser('import', help="Import a shortcut file into your Shortcuts Library")
    import_parser.add_argument('path_or_url', help='The path to the shortcut file or the iCloud Share URL of the shortcut to import')
    import_parser.add_argument('--url', action='store_true', help='Import the shortcut from an iCloud Share URL')

    args = parser.parse_args()


    # get-actions main
    if args.command == 'get-actions':
        if not shortcut_exists(args.name):
            print(f"Error: '{args.name}' does not exist in your Shortcuts library")
            sys.exit(1)

        plist = get_shortcut_plist(args.name)
        actions = get_shortcut_actions(plist)
        if args.identifiers:
            output = get_action_ids(actions)
        else:
            output = actions
            
        if args.json:
            print(json.dumps(output, indent=4))
        else:
            print(plistlib.dumps(output, fmt=plistlib.FMT_XML).decode('utf-8'))

    # count-actions main
    elif args.command == 'count-actions':
        if not shortcut_exists(args.name):
            print(f"Error: '{args.name}' does not exist in your Shortcuts library")
            sys.exit(1)

        plist = get_shortcut_plist(args.name)
        actions = get_shortcut_actions(plist)
        print(len(actions))

    # convert main
    elif args.command == 'convert':
        if not shortcut_exists(args.name):
            print(f"Error: '{args.name}' does not exist in your Shortcuts library")
            sys.exit(1)

        plist = get_shortcut_plist(args.name)
        if args.json:
            print(json.dumps(obj=plist, indent=4))
        elif args.plist:
            print(plistlib.dumps(plist, fmt=plistlib.FMT_XML).decode('utf-8'))

    # get-uuid main
    elif args.command == 'get-uuid':
        if not shortcut_exists(args.name):
            print(f"Error: '{args.name}' does not exist in your Shortcuts library")
            sys.exit(1)

        uuid = get_shortcut_uuid(args.name)
        if not uuid:
            print(f"Error: UUID for '{args.name}' not found")
            sys.exit(1)
        print(uuid)
    
    # open main
    elif args.command == 'open':
        if not shortcut_exists(args.name):
            print(f"Error: '{args.name}' does not exist in your Shortcuts library")
            sys.exit(1)
        
        open_shortcut(args.name)

    # import main
    elif args.command == 'import':
        if args.url:
            import_shortcut(args.path_or_url, isURL=True)
        else:
            import_shortcut(args.path_or_url)



if __name__ == "__main__":
    main()